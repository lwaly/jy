// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_http_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_http_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_HeadersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_http_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_ParamsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_http_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_Upgrade;
}  // namespace protobuf_http_2eproto
class HttpMsg_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpMsg_HeadersEntry_DoNotUse>
      _instance;
} _HttpMsg_HeadersEntry_DoNotUse_default_instance_;
class HttpMsg_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpMsg_ParamsEntry_DoNotUse>
      _instance;
} _HttpMsg_ParamsEntry_DoNotUse_default_instance_;
class HttpMsg_UpgradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpMsg_Upgrade>
      _instance;
} _HttpMsg_Upgrade_default_instance_;
class HttpMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpMsg>
      _instance;
} _HttpMsg_default_instance_;
namespace protobuf_http_2eproto {
static void InitDefaultsHttpMsg_HeadersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::HttpMsg_HeadersEntry_DoNotUse();
  }
  ::HttpMsg_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_HeadersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpMsg_HeadersEntry_DoNotUse}, {}};

static void InitDefaultsHttpMsg_ParamsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::HttpMsg_ParamsEntry_DoNotUse();
  }
  ::HttpMsg_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_ParamsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpMsg_ParamsEntry_DoNotUse}, {}};

static void InitDefaultsHttpMsg_Upgrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_Upgrade_default_instance_;
    new (ptr) ::HttpMsg_Upgrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpMsg_Upgrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_Upgrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpMsg_Upgrade}, {}};

static void InitDefaultsHttpMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_default_instance_;
    new (ptr) ::HttpMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_HttpMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsHttpMsg}, {
      &protobuf_http_2eproto::scc_info_HttpMsg_HeadersEntry_DoNotUse.base,
      &protobuf_http_2eproto::scc_info_HttpMsg_ParamsEntry_DoNotUse.base,
      &protobuf_http_2eproto::scc_info_HttpMsg_Upgrade.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HttpMsg_HeadersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HttpMsg_ParamsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HttpMsg_Upgrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HttpMsg.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Upgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Upgrade, is_upgrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Upgrade, protocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, http_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, http_minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, content_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, upgrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, keep_alive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, is_decoding_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::HttpMsg_HeadersEntry_DoNotUse)},
  { 9, 16, sizeof(::HttpMsg_ParamsEntry_DoNotUse)},
  { 18, -1, sizeof(::HttpMsg_Upgrade)},
  { 25, -1, sizeof(::HttpMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HttpMsg_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HttpMsg_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HttpMsg_Upgrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HttpMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "http.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nhttp.proto\"\341\003\n\007HttpMsg\022\014\n\004type\030\001 \001(\005\022\022"
      "\n\nhttp_major\030\002 \001(\005\022\022\n\nhttp_minor\030\003 \001(\005\022\026"
      "\n\016content_length\030\004 \001(\005\022\016\n\006method\030\005 \001(\005\022\023"
      "\n\013status_code\030\006 \001(\005\022\020\n\010encoding\030\007 \001(\005\022\013\n"
      "\003url\030\010 \001(\t\022&\n\007headers\030\t \003(\0132\025.HttpMsg.He"
      "adersEntry\022\014\n\004body\030\n \001(\014\022$\n\006params\030\013 \003(\013"
      "2\024.HttpMsg.ParamsEntry\022!\n\007upgrade\030\014 \001(\0132"
      "\020.HttpMsg.Upgrade\022\022\n\nkeep_alive\030\r \001(\002\022\014\n"
      "\004path\030\016 \001(\t\022\023\n\013is_decoding\030\017 \001(\010\032.\n\014Head"
      "ersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
      "\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\032/\n\007Upgrade\022\022\n\nis_upgrade\030\001 \001(\010\022\020"
      "\n\010protocol\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_http_2eproto

// ===================================================================

HttpMsg_HeadersEntry_DoNotUse::HttpMsg_HeadersEntry_DoNotUse() {}
HttpMsg_HeadersEntry_DoNotUse::HttpMsg_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HttpMsg_HeadersEntry_DoNotUse::MergeFrom(const HttpMsg_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HttpMsg_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[0];
}
void HttpMsg_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HttpMsg_ParamsEntry_DoNotUse::HttpMsg_ParamsEntry_DoNotUse() {}
HttpMsg_ParamsEntry_DoNotUse::HttpMsg_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HttpMsg_ParamsEntry_DoNotUse::MergeFrom(const HttpMsg_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HttpMsg_ParamsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[1];
}
void HttpMsg_ParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HttpMsg_Upgrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpMsg_Upgrade::kIsUpgradeFieldNumber;
const int HttpMsg_Upgrade::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpMsg_Upgrade::HttpMsg_Upgrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_http_2eproto::scc_info_HttpMsg_Upgrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpMsg.Upgrade)
}
HttpMsg_Upgrade::HttpMsg_Upgrade(const HttpMsg_Upgrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  is_upgrade_ = from.is_upgrade_;
  // @@protoc_insertion_point(copy_constructor:HttpMsg.Upgrade)
}

void HttpMsg_Upgrade::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_upgrade_ = false;
}

HttpMsg_Upgrade::~HttpMsg_Upgrade() {
  // @@protoc_insertion_point(destructor:HttpMsg.Upgrade)
  SharedDtor();
}

void HttpMsg_Upgrade::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpMsg_Upgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpMsg_Upgrade::descriptor() {
  ::protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpMsg_Upgrade& HttpMsg_Upgrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_http_2eproto::scc_info_HttpMsg_Upgrade.base);
  return *internal_default_instance();
}


void HttpMsg_Upgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg.Upgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_upgrade_ = false;
  _internal_metadata_.Clear();
}

bool HttpMsg_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpMsg.Upgrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_upgrade = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.Upgrade.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpMsg.Upgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpMsg.Upgrade)
  return false;
#undef DO_
}

void HttpMsg_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpMsg.Upgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_upgrade = 1;
  if (this->is_upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_upgrade(), output);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.Upgrade.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpMsg.Upgrade)
}

::google::protobuf::uint8* HttpMsg_Upgrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg.Upgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_upgrade = 1;
  if (this->is_upgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_upgrade(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.Upgrade.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg.Upgrade)
  return target;
}

size_t HttpMsg_Upgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg.Upgrade)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // bool is_upgrade = 1;
  if (this->is_upgrade() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpMsg_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg.Upgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpMsg_Upgrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpMsg_Upgrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg.Upgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg.Upgrade)
    MergeFrom(*source);
  }
}

void HttpMsg_Upgrade::MergeFrom(const HttpMsg_Upgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg.Upgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.is_upgrade() != 0) {
    set_is_upgrade(from.is_upgrade());
  }
}

void HttpMsg_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg.Upgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg_Upgrade::CopyFrom(const HttpMsg_Upgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg.Upgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg_Upgrade::IsInitialized() const {
  return true;
}

void HttpMsg_Upgrade::Swap(HttpMsg_Upgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpMsg_Upgrade::InternalSwap(HttpMsg_Upgrade* other) {
  using std::swap;
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_upgrade_, other->is_upgrade_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpMsg_Upgrade::GetMetadata() const {
  protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpMsg::InitAsDefaultInstance() {
  ::_HttpMsg_default_instance_._instance.get_mutable()->upgrade_ = const_cast< ::HttpMsg_Upgrade*>(
      ::HttpMsg_Upgrade::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpMsg::kTypeFieldNumber;
const int HttpMsg::kHttpMajorFieldNumber;
const int HttpMsg::kHttpMinorFieldNumber;
const int HttpMsg::kContentLengthFieldNumber;
const int HttpMsg::kMethodFieldNumber;
const int HttpMsg::kStatusCodeFieldNumber;
const int HttpMsg::kEncodingFieldNumber;
const int HttpMsg::kUrlFieldNumber;
const int HttpMsg::kHeadersFieldNumber;
const int HttpMsg::kBodyFieldNumber;
const int HttpMsg::kParamsFieldNumber;
const int HttpMsg::kUpgradeFieldNumber;
const int HttpMsg::kKeepAliveFieldNumber;
const int HttpMsg::kPathFieldNumber;
const int HttpMsg::kIsDecodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpMsg::HttpMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_http_2eproto::scc_info_HttpMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpMsg)
}
HttpMsg::HttpMsg(const HttpMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  params_.MergeFrom(from.params_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_upgrade()) {
    upgrade_ = new ::HttpMsg_Upgrade(*from.upgrade_);
  } else {
    upgrade_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_decoding_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_decoding_));
  // @@protoc_insertion_point(copy_constructor:HttpMsg)
}

void HttpMsg::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upgrade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_decoding_) -
      reinterpret_cast<char*>(&upgrade_)) + sizeof(is_decoding_));
}

HttpMsg::~HttpMsg() {
  // @@protoc_insertion_point(destructor:HttpMsg)
  SharedDtor();
}

void HttpMsg::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete upgrade_;
}

void HttpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpMsg::descriptor() {
  ::protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpMsg& HttpMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_http_2eproto::scc_info_HttpMsg.base);
  return *internal_default_instance();
}


void HttpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  params_.Clear();
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && upgrade_ != NULL) {
    delete upgrade_;
  }
  upgrade_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_decoding_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_decoding_));
  _internal_metadata_.Clear();
}

bool HttpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 http_major = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 http_minor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 content_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 method = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 encoding = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> headers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          HttpMsg_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HttpMsg_HeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.HeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.HeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> params = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          HttpMsg_ParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HttpMsg_ParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.ParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HttpMsg.Upgrade upgrade = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upgrade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float keep_alive = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &keep_alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HttpMsg.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_decoding = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_decoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpMsg)
  return false;
#undef DO_
}

void HttpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 http_major = 2;
  if (this->http_major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->http_major(), output);
  }

  // int32 http_minor = 3;
  if (this->http_minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->http_minor(), output);
  }

  // int32 content_length = 4;
  if (this->content_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->content_length(), output);
  }

  // int32 method = 5;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->method(), output);
  }

  // int32 status_code = 6;
  if (this->status_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status_code(), output);
  }

  // int32 encoding = 7;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->encoding(), output);
  }

  // string url = 8;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // map<string, string> headers = 9;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.HeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HttpMsg_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HttpMsg_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes body = 10;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->body(), output);
  }

  // map<string, string> params = 11;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.ParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.ParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HttpMsg_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HttpMsg_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .HttpMsg.Upgrade upgrade = 12;
  if (this->has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_upgrade(), output);
  }

  // float keep_alive = 13;
  if (this->keep_alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->keep_alive(), output);
  }

  // string path = 14;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->path(), output);
  }

  // bool is_decoding = 15;
  if (this->is_decoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_decoding(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpMsg)
}

::google::protobuf::uint8* HttpMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 http_major = 2;
  if (this->http_major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->http_major(), target);
  }

  // int32 http_minor = 3;
  if (this->http_minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->http_minor(), target);
  }

  // int32 content_length = 4;
  if (this->content_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->content_length(), target);
  }

  // int32 method = 5;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->method(), target);
  }

  // int32 status_code = 6;
  if (this->status_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status_code(), target);
  }

  // int32 encoding = 7;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->encoding(), target);
  }

  // string url = 8;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // map<string, string> headers = 9;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.HeadersEntry.value");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HttpMsg_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HttpMsg_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes body = 10;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->body(), target);
  }

  // map<string, string> params = 11;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.ParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.ParamsEntry.value");
      }
    };

    if (deterministic &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HttpMsg_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HttpMsg_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .HttpMsg.Upgrade upgrade = 12;
  if (this->has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_upgrade(), deterministic, target);
  }

  // float keep_alive = 13;
  if (this->keep_alive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->keep_alive(), target);
  }

  // string path = 14;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->path(), target);
  }

  // bool is_decoding = 15;
  if (this->is_decoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_decoding(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg)
  return target;
}

size_t HttpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> headers = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::std::unique_ptr<HttpMsg_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> params = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->params_size());
  {
    ::std::unique_ptr<HttpMsg_ParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string url = 8;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // bytes body = 10;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // string path = 14;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .HttpMsg.Upgrade upgrade = 12;
  if (this->has_upgrade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upgrade_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 http_major = 2;
  if (this->http_major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_major());
  }

  // int32 http_minor = 3;
  if (this->http_minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_minor());
  }

  // int32 content_length = 4;
  if (this->content_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->content_length());
  }

  // int32 method = 5;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method());
  }

  // int32 status_code = 6;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status_code());
  }

  // int32 encoding = 7;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->encoding());
  }

  // float keep_alive = 13;
  if (this->keep_alive() != 0) {
    total_size += 1 + 4;
  }

  // bool is_decoding = 15;
  if (this->is_decoding() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg)
    MergeFrom(*source);
  }
}

void HttpMsg::MergeFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  params_.MergeFrom(from.params_);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_upgrade()) {
    mutable_upgrade()->::HttpMsg_Upgrade::MergeFrom(from.upgrade());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.http_major() != 0) {
    set_http_major(from.http_major());
  }
  if (from.http_minor() != 0) {
    set_http_minor(from.http_minor());
  }
  if (from.content_length() != 0) {
    set_content_length(from.content_length());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.keep_alive() != 0) {
    set_keep_alive(from.keep_alive());
  }
  if (from.is_decoding() != 0) {
    set_is_decoding(from.is_decoding());
  }
}

void HttpMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg::CopyFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg::IsInitialized() const {
  return true;
}

void HttpMsg::Swap(HttpMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpMsg::InternalSwap(HttpMsg* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  params_.Swap(&other->params_);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upgrade_, other->upgrade_);
  swap(type_, other->type_);
  swap(http_major_, other->http_major_);
  swap(http_minor_, other->http_minor_);
  swap(content_length_, other->content_length_);
  swap(method_, other->method_);
  swap(status_code_, other->status_code_);
  swap(encoding_, other->encoding_);
  swap(keep_alive_, other->keep_alive_);
  swap(is_decoding_, other->is_decoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpMsg::GetMetadata() const {
  protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HttpMsg_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::HttpMsg_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::HttpMsg_HeadersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HttpMsg_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::HttpMsg_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::HttpMsg_ParamsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HttpMsg_Upgrade* Arena::CreateMaybeMessage< ::HttpMsg_Upgrade >(Arena* arena) {
  return Arena::CreateInternal< ::HttpMsg_Upgrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HttpMsg* Arena::CreateMaybeMessage< ::HttpMsg >(Arena* arena) {
  return Arena::CreateInternal< ::HttpMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
